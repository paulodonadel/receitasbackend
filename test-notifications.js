// Teste das notifica√ß√µes push - Execute este arquivo para testar

const mongoose = require('mongoose');
require('dotenv').config();

// Importar models
const PushSubscription = require('./src/models/pushSubscription.model');
const User = require('./src/models/user.model');
const Prescription = require('./src/models/prescription.model');

// Importar servi√ßo
const notificationService = require('./src/notificationService');

async function testNotifications() {
  try {
    console.log('üß™ Iniciando teste de notifica√ß√µes push...');

    // Conectar ao banco
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Conectado ao MongoDB');

    // Verificar se existem usu√°rios
    const userCount = await User.countDocuments();
    console.log(`üìä Total de usu√°rios: ${userCount}`);

    // Verificar se existem subscriptions
    const subscriptionCount = await PushSubscription.countDocuments();
    console.log(`üì± Total de subscriptions: ${subscriptionCount}`);

    // Verificar se existem prescri√ß√µes
    const prescriptionCount = await Prescription.countDocuments();
    console.log(`üíä Total de prescri√ß√µes: ${prescriptionCount}`);

    if (subscriptionCount > 0) {
      console.log('\nüîî Testando envio de notifica√ß√£o...');
      
      // Pegar uma subscription para teste
      const testSubscription = await PushSubscription.findOne().populate('userId');
      
      if (testSubscription) {
        console.log(`üìß Enviando teste para usu√°rio: ${testSubscription.userId}`);
        
        const result = await notificationService.sendTestNotification(testSubscription.userId);
        
        if (result.success) {
          console.log('‚úÖ Notifica√ß√£o de teste enviada com sucesso!');
        } else {
          console.log('‚ùå Falha ao enviar notifica√ß√£o:', result.error || result.reason);
        }
      }
    } else {
      console.log('‚ö†Ô∏è Nenhuma subscription encontrada para teste');
      console.log('üí° Para testar, primeiro ative as notifica√ß√µes em um dispositivo');
    }

    console.log('\nüìã Estrutura das collections:');
    console.log('- PushSubscription:', Object.keys(PushSubscription.schema.paths));
    console.log('- User:', Object.keys(User.schema.paths));
    console.log('- Prescription:', Object.keys(Prescription.schema.paths));

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado do MongoDB');
  }
}

// Verificar configura√ß√£o VAPID
console.log('üîë Verificando configura√ß√£o VAPID...');
console.log('VAPID_PUBLIC_KEY:', process.env.VAPID_PUBLIC_KEY ? '‚úÖ Configurado' : '‚ùå N√£o encontrado');
console.log('VAPID_PRIVATE_KEY:', process.env.VAPID_PRIVATE_KEY ? '‚úÖ Configurado' : '‚ùå N√£o encontrado');

if (process.env.VAPID_PUBLIC_KEY && process.env.VAPID_PRIVATE_KEY) {
  testNotifications();
} else {
  console.log('‚ùå Configura√ß√£o VAPID incompleta. Verifique o arquivo .env');
}
